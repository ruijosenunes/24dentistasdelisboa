@inherits UmbracoTemplatePage
@{
    // Model.Content is the current page that we're on
    // AncestorsOrSelf is all of the ancestors this page has in the tree
    // (1) means: go up to level 1 and stop looking for more ancestors when you get there
    // First() gets the first ancestor found (the home page, on level 1)
    var homePage = CurrentPage.AncestorsOrSelf(1).First();

    // The menu items we want are all of the children of the homepage
    // We also check if "Hide in navigation" is on in the menu, we shouldn't show hidden items
    var menuItems = homePage.Children.Where("UmbracoNaviHide == false");
}
<!-- Nav -->
<nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <!-- You'll want to use a responsive image option so this logo looks good on devices - I recommend using something like retina.js (do a quick Google search for it and you'll find it) -->
            <a class="navbar-brand" href="index.html">Modern Business</a>
        </div>

        <div class="collapse navbar-collapse navbar-ex1-collapse">
            <ul class="nav navbar-nav navbar-right">
                @* If the Url of the current page is "/" then we want to add the class "current_page_item" *@
                @* Otherwise, we set the class to null, that way it will not even be added to the <li> element *@
                <li><a href="/"><i class="fa fa-home"></i></a></li>

                @foreach (var item in menuItems)
                {
                    @* If the Id of the item is the same as the Id of the current page then we want to add the class "current_page_item" *@
                    @* Otherwise, we set the class to null, that way it will not even be added to the <li> element *@
                    var NumOfMenuSubItems = item.Children.Where("UmbracoNaviHide == false").Count();
                    <li class="@(NumOfMenuSubItems == 0 ? null : "dropdown")">
                        <a class="@(NumOfMenuSubItems == 0 ? null : "dropdown-toggle")" data-toggle="@(NumOfMenuSubItems == 0 ? null : "dropdown")" href="@item.Url">@item.Name <b class="@(NumOfMenuSubItems == 0 ? null : "caret")"></b></a>

                        @if (NumOfMenuSubItems > 0)
                        {
                        <ul class="dropdown-menu">
                            @foreach (var subItem in item.Children.Where("UmbracoNaviHide == false"))
                            {
                                <li><a href="@subItem.Url">@subItem.Name</a></li>
                            }
                        </ul>
                        }

                    </li>
                }
            </ul>
        </div>
    </div>
</nav>
<!-- /Nav -->